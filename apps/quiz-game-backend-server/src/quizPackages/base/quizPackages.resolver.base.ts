/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QuizPackages } from "./QuizPackages";
import { QuizPackagesCountArgs } from "./QuizPackagesCountArgs";
import { QuizPackagesFindManyArgs } from "./QuizPackagesFindManyArgs";
import { QuizPackagesFindUniqueArgs } from "./QuizPackagesFindUniqueArgs";
import { CreateQuizPackagesArgs } from "./CreateQuizPackagesArgs";
import { UpdateQuizPackagesArgs } from "./UpdateQuizPackagesArgs";
import { DeleteQuizPackagesArgs } from "./DeleteQuizPackagesArgs";
import { LobbiesFindManyArgs } from "../../lobbies/base/LobbiesFindManyArgs";
import { Lobbies } from "../../lobbies/base/Lobbies";
import { TopicsFindManyArgs } from "../../topics/base/TopicsFindManyArgs";
import { Topics } from "../../topics/base/Topics";
import { QuizPackagesService } from "../quizPackages.service";
@graphql.Resolver(() => QuizPackages)
export class QuizPackagesResolverBase {
  constructor(protected readonly service: QuizPackagesService) {}

  async _quizPackagesItemsMeta(
    @graphql.Args() args: QuizPackagesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QuizPackages])
  async quizPackagesItems(
    @graphql.Args() args: QuizPackagesFindManyArgs
  ): Promise<QuizPackages[]> {
    return this.service.quizPackagesItems(args);
  }

  @graphql.Query(() => QuizPackages, { nullable: true })
  async quizPackages(
    @graphql.Args() args: QuizPackagesFindUniqueArgs
  ): Promise<QuizPackages | null> {
    const result = await this.service.quizPackages(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QuizPackages)
  async createQuizPackages(
    @graphql.Args() args: CreateQuizPackagesArgs
  ): Promise<QuizPackages> {
    return await this.service.createQuizPackages({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => QuizPackages)
  async updateQuizPackages(
    @graphql.Args() args: UpdateQuizPackagesArgs
  ): Promise<QuizPackages | null> {
    try {
      return await this.service.updateQuizPackages({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuizPackages)
  async deleteQuizPackages(
    @graphql.Args() args: DeleteQuizPackagesArgs
  ): Promise<QuizPackages | null> {
    try {
      return await this.service.deleteQuizPackages(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Lobbies], { name: "lobbiesItems" })
  async findLobbiesItems(
    @graphql.Parent() parent: QuizPackages,
    @graphql.Args() args: LobbiesFindManyArgs
  ): Promise<Lobbies[]> {
    const results = await this.service.findLobbiesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Topics], { name: "topicsItems" })
  async findTopicsItems(
    @graphql.Parent() parent: QuizPackages,
    @graphql.Args() args: TopicsFindManyArgs
  ): Promise<Topics[]> {
    const results = await this.service.findTopicsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
