/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QuizPackages as PrismaQuizPackages,
  Lobbies as PrismaLobbies,
  Topics as PrismaTopics,
} from "@prisma/client";

export class QuizPackagesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuizPackagesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.quizPackages.count(args);
  }

  async quizPackagesItems(
    args: Prisma.QuizPackagesFindManyArgs
  ): Promise<PrismaQuizPackages[]> {
    return this.prisma.quizPackages.findMany(args);
  }
  async quizPackages(
    args: Prisma.QuizPackagesFindUniqueArgs
  ): Promise<PrismaQuizPackages | null> {
    return this.prisma.quizPackages.findUnique(args);
  }
  async createQuizPackages(
    args: Prisma.QuizPackagesCreateArgs
  ): Promise<PrismaQuizPackages> {
    return this.prisma.quizPackages.create(args);
  }
  async updateQuizPackages(
    args: Prisma.QuizPackagesUpdateArgs
  ): Promise<PrismaQuizPackages> {
    return this.prisma.quizPackages.update(args);
  }
  async deleteQuizPackages(
    args: Prisma.QuizPackagesDeleteArgs
  ): Promise<PrismaQuizPackages> {
    return this.prisma.quizPackages.delete(args);
  }

  async findLobbiesItems(
    parentId: string,
    args: Prisma.LobbiesFindManyArgs
  ): Promise<PrismaLobbies[]> {
    return this.prisma.quizPackages
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .lobbiesItems(args);
  }

  async findTopicsItems(
    parentId: string,
    args: Prisma.TopicsFindManyArgs
  ): Promise<PrismaTopics[]> {
    return this.prisma.quizPackages
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .topicsItems(args);
  }
}
