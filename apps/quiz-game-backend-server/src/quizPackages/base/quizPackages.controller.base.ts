/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QuizPackagesService } from "../quizPackages.service";
import { QuizPackagesCreateInput } from "./QuizPackagesCreateInput";
import { QuizPackages } from "./QuizPackages";
import { QuizPackagesFindManyArgs } from "./QuizPackagesFindManyArgs";
import { QuizPackagesWhereUniqueInput } from "./QuizPackagesWhereUniqueInput";
import { QuizPackagesUpdateInput } from "./QuizPackagesUpdateInput";
import { LobbiesFindManyArgs } from "../../lobbies/base/LobbiesFindManyArgs";
import { Lobbies } from "../../lobbies/base/Lobbies";
import { LobbiesWhereUniqueInput } from "../../lobbies/base/LobbiesWhereUniqueInput";
import { TopicsFindManyArgs } from "../../topics/base/TopicsFindManyArgs";
import { Topics } from "../../topics/base/Topics";
import { TopicsWhereUniqueInput } from "../../topics/base/TopicsWhereUniqueInput";

export class QuizPackagesControllerBase {
  constructor(protected readonly service: QuizPackagesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuizPackages })
  async createQuizPackages(
    @common.Body() data: QuizPackagesCreateInput
  ): Promise<QuizPackages> {
    return await this.service.createQuizPackages({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuizPackages] })
  @ApiNestedQuery(QuizPackagesFindManyArgs)
  async quizPackagesItems(
    @common.Req() request: Request
  ): Promise<QuizPackages[]> {
    const args = plainToClass(QuizPackagesFindManyArgs, request.query);
    return this.service.quizPackagesItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuizPackages })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async quizPackages(
    @common.Param() params: QuizPackagesWhereUniqueInput
  ): Promise<QuizPackages | null> {
    const result = await this.service.quizPackages({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuizPackages })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQuizPackages(
    @common.Param() params: QuizPackagesWhereUniqueInput,
    @common.Body() data: QuizPackagesUpdateInput
  ): Promise<QuizPackages | null> {
    try {
      return await this.service.updateQuizPackages({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuizPackages })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQuizPackages(
    @common.Param() params: QuizPackagesWhereUniqueInput
  ): Promise<QuizPackages | null> {
    try {
      return await this.service.deleteQuizPackages({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/lobbiesItems")
  @ApiNestedQuery(LobbiesFindManyArgs)
  async findLobbiesItems(
    @common.Req() request: Request,
    @common.Param() params: QuizPackagesWhereUniqueInput
  ): Promise<Lobbies[]> {
    const query = plainToClass(LobbiesFindManyArgs, request.query);
    const results = await this.service.findLobbiesItems(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        host: true,
        hostId: true,
        hostUser: true,
        id: true,
        lobbiesQuizPackage: true,
        name: true,

        quizPackage: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lobbiesItems")
  async connectLobbiesItems(
    @common.Param() params: QuizPackagesWhereUniqueInput,
    @common.Body() body: LobbiesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lobbiesItems: {
        connect: body,
      },
    };
    await this.service.updateQuizPackages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lobbiesItems")
  async updateLobbiesItems(
    @common.Param() params: QuizPackagesWhereUniqueInput,
    @common.Body() body: LobbiesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lobbiesItems: {
        set: body,
      },
    };
    await this.service.updateQuizPackages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lobbiesItems")
  async disconnectLobbiesItems(
    @common.Param() params: QuizPackagesWhereUniqueInput,
    @common.Body() body: LobbiesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lobbiesItems: {
        disconnect: body,
      },
    };
    await this.service.updateQuizPackages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/topicsItems")
  @ApiNestedQuery(TopicsFindManyArgs)
  async findTopicsItems(
    @common.Req() request: Request,
    @common.Param() params: QuizPackagesWhereUniqueInput
  ): Promise<Topics[]> {
    const query = plainToClass(TopicsFindManyArgs, request.query);
    const results = await this.service.findTopicsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        packageId: true,

        quizPackage: {
          select: {
            id: true,
          },
        },

        topicQuizPackage: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/topicsItems")
  async connectTopicsItems(
    @common.Param() params: QuizPackagesWhereUniqueInput,
    @common.Body() body: TopicsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      topicsItems: {
        connect: body,
      },
    };
    await this.service.updateQuizPackages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/topicsItems")
  async updateTopicsItems(
    @common.Param() params: QuizPackagesWhereUniqueInput,
    @common.Body() body: TopicsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      topicsItems: {
        set: body,
      },
    };
    await this.service.updateQuizPackages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/topicsItems")
  async disconnectTopicsItems(
    @common.Param() params: QuizPackagesWhereUniqueInput,
    @common.Body() body: TopicsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      topicsItems: {
        disconnect: body,
      },
    };
    await this.service.updateQuizPackages({
      where: params,
      data,
      select: { id: true },
    });
  }
}
