/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserLobbiesService } from "../userLobbies.service";
import { UserLobbiesCreateInput } from "./UserLobbiesCreateInput";
import { UserLobbies } from "./UserLobbies";
import { UserLobbiesFindManyArgs } from "./UserLobbiesFindManyArgs";
import { UserLobbiesWhereUniqueInput } from "./UserLobbiesWhereUniqueInput";
import { UserLobbiesUpdateInput } from "./UserLobbiesUpdateInput";

export class UserLobbiesControllerBase {
  constructor(protected readonly service: UserLobbiesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserLobbies })
  async createUserLobbies(
    @common.Body() data: UserLobbiesCreateInput
  ): Promise<UserLobbies> {
    return await this.service.createUserLobbies({
      data: {
        ...data,

        lobby: data.lobby
          ? {
              connect: data.lobby,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        lobby: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userLobbiesLobby: true,
        userLobbiesUser: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserLobbies] })
  @ApiNestedQuery(UserLobbiesFindManyArgs)
  async userLobbiesItems(
    @common.Req() request: Request
  ): Promise<UserLobbies[]> {
    const args = plainToClass(UserLobbiesFindManyArgs, request.query);
    return this.service.userLobbiesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,

        lobby: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userLobbiesLobby: true,
        userLobbiesUser: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserLobbies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userLobbies(
    @common.Param() params: UserLobbiesWhereUniqueInput
  ): Promise<UserLobbies | null> {
    const result = await this.service.userLobbies({
      where: params,
      select: {
        createdAt: true,
        id: true,

        lobby: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userLobbiesLobby: true,
        userLobbiesUser: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserLobbies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserLobbies(
    @common.Param() params: UserLobbiesWhereUniqueInput,
    @common.Body() data: UserLobbiesUpdateInput
  ): Promise<UserLobbies | null> {
    try {
      return await this.service.updateUserLobbies({
        where: params,
        data: {
          ...data,

          lobby: data.lobby
            ? {
                connect: data.lobby,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          lobby: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          userLobbiesLobby: true,
          userLobbiesUser: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserLobbies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserLobbies(
    @common.Param() params: UserLobbiesWhereUniqueInput
  ): Promise<UserLobbies | null> {
    try {
      return await this.service.deleteUserLobbies({
        where: params,
        select: {
          createdAt: true,
          id: true,

          lobby: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          userLobbiesLobby: true,
          userLobbiesUser: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
