/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserLobbies } from "./UserLobbies";
import { UserLobbiesCountArgs } from "./UserLobbiesCountArgs";
import { UserLobbiesFindManyArgs } from "./UserLobbiesFindManyArgs";
import { UserLobbiesFindUniqueArgs } from "./UserLobbiesFindUniqueArgs";
import { CreateUserLobbiesArgs } from "./CreateUserLobbiesArgs";
import { UpdateUserLobbiesArgs } from "./UpdateUserLobbiesArgs";
import { DeleteUserLobbiesArgs } from "./DeleteUserLobbiesArgs";
import { Lobbies } from "../../lobbies/base/Lobbies";
import { User } from "../../user/base/User";
import { UserLobbiesService } from "../userLobbies.service";
@graphql.Resolver(() => UserLobbies)
export class UserLobbiesResolverBase {
  constructor(protected readonly service: UserLobbiesService) {}

  async _userLobbiesItemsMeta(
    @graphql.Args() args: UserLobbiesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserLobbies])
  async userLobbiesItems(
    @graphql.Args() args: UserLobbiesFindManyArgs
  ): Promise<UserLobbies[]> {
    return this.service.userLobbiesItems(args);
  }

  @graphql.Query(() => UserLobbies, { nullable: true })
  async userLobbies(
    @graphql.Args() args: UserLobbiesFindUniqueArgs
  ): Promise<UserLobbies | null> {
    const result = await this.service.userLobbies(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserLobbies)
  async createUserLobbies(
    @graphql.Args() args: CreateUserLobbiesArgs
  ): Promise<UserLobbies> {
    return await this.service.createUserLobbies({
      ...args,
      data: {
        ...args.data,

        lobby: args.data.lobby
          ? {
              connect: args.data.lobby,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserLobbies)
  async updateUserLobbies(
    @graphql.Args() args: UpdateUserLobbiesArgs
  ): Promise<UserLobbies | null> {
    try {
      return await this.service.updateUserLobbies({
        ...args,
        data: {
          ...args.data,

          lobby: args.data.lobby
            ? {
                connect: args.data.lobby,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserLobbies)
  async deleteUserLobbies(
    @graphql.Args() args: DeleteUserLobbiesArgs
  ): Promise<UserLobbies | null> {
    try {
      return await this.service.deleteUserLobbies(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Lobbies, {
    nullable: true,
    name: "lobby",
  })
  async getLobby(
    @graphql.Parent() parent: UserLobbies
  ): Promise<Lobbies | null> {
    const result = await this.service.getLobby(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: UserLobbies): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
