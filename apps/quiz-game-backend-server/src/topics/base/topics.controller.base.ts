/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TopicsService } from "../topics.service";
import { TopicsCreateInput } from "./TopicsCreateInput";
import { Topics } from "./Topics";
import { TopicsFindManyArgs } from "./TopicsFindManyArgs";
import { TopicsWhereUniqueInput } from "./TopicsWhereUniqueInput";
import { TopicsUpdateInput } from "./TopicsUpdateInput";
import { QuestionsFindManyArgs } from "../../questions/base/QuestionsFindManyArgs";
import { Questions } from "../../questions/base/Questions";
import { QuestionsWhereUniqueInput } from "../../questions/base/QuestionsWhereUniqueInput";

export class TopicsControllerBase {
  constructor(protected readonly service: TopicsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Topics })
  async createTopics(@common.Body() data: TopicsCreateInput): Promise<Topics> {
    return await this.service.createTopics({
      data: {
        ...data,

        quizPackage: data.quizPackage
          ? {
              connect: data.quizPackage,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        packageId: true,

        quizPackage: {
          select: {
            id: true,
          },
        },

        topicQuizPackage: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Topics] })
  @ApiNestedQuery(TopicsFindManyArgs)
  async topicsItems(@common.Req() request: Request): Promise<Topics[]> {
    const args = plainToClass(TopicsFindManyArgs, request.query);
    return this.service.topicsItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        packageId: true,

        quizPackage: {
          select: {
            id: true,
          },
        },

        topicQuizPackage: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Topics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async topics(
    @common.Param() params: TopicsWhereUniqueInput
  ): Promise<Topics | null> {
    const result = await this.service.topics({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        packageId: true,

        quizPackage: {
          select: {
            id: true,
          },
        },

        topicQuizPackage: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Topics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTopics(
    @common.Param() params: TopicsWhereUniqueInput,
    @common.Body() data: TopicsUpdateInput
  ): Promise<Topics | null> {
    try {
      return await this.service.updateTopics({
        where: params,
        data: {
          ...data,

          quizPackage: data.quizPackage
            ? {
                connect: data.quizPackage,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          packageId: true,

          quizPackage: {
            select: {
              id: true,
            },
          },

          topicQuizPackage: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Topics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTopics(
    @common.Param() params: TopicsWhereUniqueInput
  ): Promise<Topics | null> {
    try {
      return await this.service.deleteTopics({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          packageId: true,

          quizPackage: {
            select: {
              id: true,
            },
          },

          topicQuizPackage: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/questionsItems")
  @ApiNestedQuery(QuestionsFindManyArgs)
  async findQuestionsItems(
    @common.Req() request: Request,
    @common.Param() params: TopicsWhereUniqueInput
  ): Promise<Questions[]> {
    const query = plainToClass(QuestionsFindManyArgs, request.query);
    const results = await this.service.findQuestionsItems(params.id, {
      ...query,
      select: {
        correctAnswer: true,
        createdAt: true,
        id: true,
        questionTopic: true,
        text: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questionsItems")
  async connectQuestionsItems(
    @common.Param() params: TopicsWhereUniqueInput,
    @common.Body() body: QuestionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questionsItems: {
        connect: body,
      },
    };
    await this.service.updateTopics({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questionsItems")
  async updateQuestionsItems(
    @common.Param() params: TopicsWhereUniqueInput,
    @common.Body() body: QuestionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questionsItems: {
        set: body,
      },
    };
    await this.service.updateTopics({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questionsItems")
  async disconnectQuestionsItems(
    @common.Param() params: TopicsWhereUniqueInput,
    @common.Body() body: QuestionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questionsItems: {
        disconnect: body,
      },
    };
    await this.service.updateTopics({
      where: params,
      data,
      select: { id: true },
    });
  }
}
