/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Topics } from "./Topics";
import { TopicsCountArgs } from "./TopicsCountArgs";
import { TopicsFindManyArgs } from "./TopicsFindManyArgs";
import { TopicsFindUniqueArgs } from "./TopicsFindUniqueArgs";
import { CreateTopicsArgs } from "./CreateTopicsArgs";
import { UpdateTopicsArgs } from "./UpdateTopicsArgs";
import { DeleteTopicsArgs } from "./DeleteTopicsArgs";
import { QuestionsFindManyArgs } from "../../questions/base/QuestionsFindManyArgs";
import { Questions } from "../../questions/base/Questions";
import { QuizPackages } from "../../quizPackages/base/QuizPackages";
import { TopicsService } from "../topics.service";
@graphql.Resolver(() => Topics)
export class TopicsResolverBase {
  constructor(protected readonly service: TopicsService) {}

  async _topicsItemsMeta(
    @graphql.Args() args: TopicsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Topics])
  async topicsItems(
    @graphql.Args() args: TopicsFindManyArgs
  ): Promise<Topics[]> {
    return this.service.topicsItems(args);
  }

  @graphql.Query(() => Topics, { nullable: true })
  async topics(
    @graphql.Args() args: TopicsFindUniqueArgs
  ): Promise<Topics | null> {
    const result = await this.service.topics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Topics)
  async createTopics(@graphql.Args() args: CreateTopicsArgs): Promise<Topics> {
    return await this.service.createTopics({
      ...args,
      data: {
        ...args.data,

        quizPackage: args.data.quizPackage
          ? {
              connect: args.data.quizPackage,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Topics)
  async updateTopics(
    @graphql.Args() args: UpdateTopicsArgs
  ): Promise<Topics | null> {
    try {
      return await this.service.updateTopics({
        ...args,
        data: {
          ...args.data,

          quizPackage: args.data.quizPackage
            ? {
                connect: args.data.quizPackage,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Topics)
  async deleteTopics(
    @graphql.Args() args: DeleteTopicsArgs
  ): Promise<Topics | null> {
    try {
      return await this.service.deleteTopics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Questions], { name: "questionsItems" })
  async findQuestionsItems(
    @graphql.Parent() parent: Topics,
    @graphql.Args() args: QuestionsFindManyArgs
  ): Promise<Questions[]> {
    const results = await this.service.findQuestionsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => QuizPackages, {
    nullable: true,
    name: "quizPackage",
  })
  async getQuizPackage(
    @graphql.Parent() parent: Topics
  ): Promise<QuizPackages | null> {
    const result = await this.service.getQuizPackage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
