/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Lobbies } from "./Lobbies";
import { LobbiesCountArgs } from "./LobbiesCountArgs";
import { LobbiesFindManyArgs } from "./LobbiesFindManyArgs";
import { LobbiesFindUniqueArgs } from "./LobbiesFindUniqueArgs";
import { CreateLobbiesArgs } from "./CreateLobbiesArgs";
import { UpdateLobbiesArgs } from "./UpdateLobbiesArgs";
import { DeleteLobbiesArgs } from "./DeleteLobbiesArgs";
import { UserLobbiesFindManyArgs } from "../../userLobbies/base/UserLobbiesFindManyArgs";
import { UserLobbies } from "../../userLobbies/base/UserLobbies";
import { QuizPackages } from "../../quizPackages/base/QuizPackages";
import { LobbiesService } from "../lobbies.service";
@graphql.Resolver(() => Lobbies)
export class LobbiesResolverBase {
  constructor(protected readonly service: LobbiesService) {}

  async _lobbiesItemsMeta(
    @graphql.Args() args: LobbiesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Lobbies])
  async lobbiesItems(
    @graphql.Args() args: LobbiesFindManyArgs
  ): Promise<Lobbies[]> {
    return this.service.lobbiesItems(args);
  }

  @graphql.Query(() => Lobbies, { nullable: true })
  async lobbies(
    @graphql.Args() args: LobbiesFindUniqueArgs
  ): Promise<Lobbies | null> {
    const result = await this.service.lobbies(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Lobbies)
  async createLobbies(
    @graphql.Args() args: CreateLobbiesArgs
  ): Promise<Lobbies> {
    return await this.service.createLobbies({
      ...args,
      data: {
        ...args.data,

        quizPackage: args.data.quizPackage
          ? {
              connect: args.data.quizPackage,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Lobbies)
  async updateLobbies(
    @graphql.Args() args: UpdateLobbiesArgs
  ): Promise<Lobbies | null> {
    try {
      return await this.service.updateLobbies({
        ...args,
        data: {
          ...args.data,

          quizPackage: args.data.quizPackage
            ? {
                connect: args.data.quizPackage,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lobbies)
  async deleteLobbies(
    @graphql.Args() args: DeleteLobbiesArgs
  ): Promise<Lobbies | null> {
    try {
      return await this.service.deleteLobbies(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [UserLobbies], { name: "userLobbiesItems" })
  async findUserLobbiesItems(
    @graphql.Parent() parent: Lobbies,
    @graphql.Args() args: UserLobbiesFindManyArgs
  ): Promise<UserLobbies[]> {
    const results = await this.service.findUserLobbiesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => QuizPackages, {
    nullable: true,
    name: "quizPackage",
  })
  async getQuizPackage(
    @graphql.Parent() parent: Lobbies
  ): Promise<QuizPackages | null> {
    const result = await this.service.getQuizPackage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
