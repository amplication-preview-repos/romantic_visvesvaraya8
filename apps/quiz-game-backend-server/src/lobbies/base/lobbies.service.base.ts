/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Lobbies as PrismaLobbies,
  UserLobbies as PrismaUserLobbies,
  QuizPackages as PrismaQuizPackages,
} from "@prisma/client";

export class LobbiesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LobbiesCountArgs, "select">): Promise<number> {
    return this.prisma.lobbies.count(args);
  }

  async lobbiesItems(
    args: Prisma.LobbiesFindManyArgs
  ): Promise<PrismaLobbies[]> {
    return this.prisma.lobbies.findMany(args);
  }
  async lobbies(
    args: Prisma.LobbiesFindUniqueArgs
  ): Promise<PrismaLobbies | null> {
    return this.prisma.lobbies.findUnique(args);
  }
  async createLobbies(args: Prisma.LobbiesCreateArgs): Promise<PrismaLobbies> {
    return this.prisma.lobbies.create(args);
  }
  async updateLobbies(args: Prisma.LobbiesUpdateArgs): Promise<PrismaLobbies> {
    return this.prisma.lobbies.update(args);
  }
  async deleteLobbies(args: Prisma.LobbiesDeleteArgs): Promise<PrismaLobbies> {
    return this.prisma.lobbies.delete(args);
  }

  async findUserLobbiesItems(
    parentId: string,
    args: Prisma.UserLobbiesFindManyArgs
  ): Promise<PrismaUserLobbies[]> {
    return this.prisma.lobbies
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userLobbiesItems(args);
  }

  async getQuizPackage(parentId: string): Promise<PrismaQuizPackages | null> {
    return this.prisma.lobbies
      .findUnique({
        where: { id: parentId },
      })
      .quizPackage();
  }
}
