/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LobbiesService } from "../lobbies.service";
import { LobbiesCreateInput } from "./LobbiesCreateInput";
import { Lobbies } from "./Lobbies";
import { LobbiesFindManyArgs } from "./LobbiesFindManyArgs";
import { LobbiesWhereUniqueInput } from "./LobbiesWhereUniqueInput";
import { LobbiesUpdateInput } from "./LobbiesUpdateInput";
import { UserLobbiesFindManyArgs } from "../../userLobbies/base/UserLobbiesFindManyArgs";
import { UserLobbies } from "../../userLobbies/base/UserLobbies";
import { UserLobbiesWhereUniqueInput } from "../../userLobbies/base/UserLobbiesWhereUniqueInput";

export class LobbiesControllerBase {
  constructor(protected readonly service: LobbiesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Lobbies })
  async createLobbies(
    @common.Body() data: LobbiesCreateInput
  ): Promise<Lobbies> {
    return await this.service.createLobbies({
      data: {
        ...data,

        quizPackage: data.quizPackage
          ? {
              connect: data.quizPackage,
            }
          : undefined,
      },
      select: {
        code: true,
        createdAt: true,
        host: true,
        hostId: true,
        hostUser: true,
        id: true,
        lobbiesQuizPackage: true,
        name: true,

        quizPackage: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Lobbies] })
  @ApiNestedQuery(LobbiesFindManyArgs)
  async lobbiesItems(@common.Req() request: Request): Promise<Lobbies[]> {
    const args = plainToClass(LobbiesFindManyArgs, request.query);
    return this.service.lobbiesItems({
      ...args,
      select: {
        code: true,
        createdAt: true,
        host: true,
        hostId: true,
        hostUser: true,
        id: true,
        lobbiesQuizPackage: true,
        name: true,

        quizPackage: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Lobbies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async lobbies(
    @common.Param() params: LobbiesWhereUniqueInput
  ): Promise<Lobbies | null> {
    const result = await this.service.lobbies({
      where: params,
      select: {
        code: true,
        createdAt: true,
        host: true,
        hostId: true,
        hostUser: true,
        id: true,
        lobbiesQuizPackage: true,
        name: true,

        quizPackage: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Lobbies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLobbies(
    @common.Param() params: LobbiesWhereUniqueInput,
    @common.Body() data: LobbiesUpdateInput
  ): Promise<Lobbies | null> {
    try {
      return await this.service.updateLobbies({
        where: params,
        data: {
          ...data,

          quizPackage: data.quizPackage
            ? {
                connect: data.quizPackage,
              }
            : undefined,
        },
        select: {
          code: true,
          createdAt: true,
          host: true,
          hostId: true,
          hostUser: true,
          id: true,
          lobbiesQuizPackage: true,
          name: true,

          quizPackage: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Lobbies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLobbies(
    @common.Param() params: LobbiesWhereUniqueInput
  ): Promise<Lobbies | null> {
    try {
      return await this.service.deleteLobbies({
        where: params,
        select: {
          code: true,
          createdAt: true,
          host: true,
          hostId: true,
          hostUser: true,
          id: true,
          lobbiesQuizPackage: true,
          name: true,

          quizPackage: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/userLobbiesItems")
  @ApiNestedQuery(UserLobbiesFindManyArgs)
  async findUserLobbiesItems(
    @common.Req() request: Request,
    @common.Param() params: LobbiesWhereUniqueInput
  ): Promise<UserLobbies[]> {
    const query = plainToClass(UserLobbiesFindManyArgs, request.query);
    const results = await this.service.findUserLobbiesItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        lobby: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userLobbiesLobby: true,
        userLobbiesUser: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userLobbiesItems")
  async connectUserLobbiesItems(
    @common.Param() params: LobbiesWhereUniqueInput,
    @common.Body() body: UserLobbiesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLobbiesItems: {
        connect: body,
      },
    };
    await this.service.updateLobbies({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userLobbiesItems")
  async updateUserLobbiesItems(
    @common.Param() params: LobbiesWhereUniqueInput,
    @common.Body() body: UserLobbiesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLobbiesItems: {
        set: body,
      },
    };
    await this.service.updateLobbies({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userLobbiesItems")
  async disconnectUserLobbiesItems(
    @common.Param() params: LobbiesWhereUniqueInput,
    @common.Body() body: UserLobbiesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLobbiesItems: {
        disconnect: body,
      },
    };
    await this.service.updateLobbies({
      where: params,
      data,
      select: { id: true },
    });
  }
}
