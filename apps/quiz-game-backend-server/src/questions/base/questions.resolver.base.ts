/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Questions } from "./Questions";
import { QuestionsCountArgs } from "./QuestionsCountArgs";
import { QuestionsFindManyArgs } from "./QuestionsFindManyArgs";
import { QuestionsFindUniqueArgs } from "./QuestionsFindUniqueArgs";
import { CreateQuestionsArgs } from "./CreateQuestionsArgs";
import { UpdateQuestionsArgs } from "./UpdateQuestionsArgs";
import { DeleteQuestionsArgs } from "./DeleteQuestionsArgs";
import { Topics } from "../../topics/base/Topics";
import { QuestionsService } from "../questions.service";
@graphql.Resolver(() => Questions)
export class QuestionsResolverBase {
  constructor(protected readonly service: QuestionsService) {}

  async _questionsItemsMeta(
    @graphql.Args() args: QuestionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Questions])
  async questionsItems(
    @graphql.Args() args: QuestionsFindManyArgs
  ): Promise<Questions[]> {
    return this.service.questionsItems(args);
  }

  @graphql.Query(() => Questions, { nullable: true })
  async questions(
    @graphql.Args() args: QuestionsFindUniqueArgs
  ): Promise<Questions | null> {
    const result = await this.service.questions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Questions)
  async createQuestions(
    @graphql.Args() args: CreateQuestionsArgs
  ): Promise<Questions> {
    return await this.service.createQuestions({
      ...args,
      data: {
        ...args.data,

        topic: args.data.topic
          ? {
              connect: args.data.topic,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Questions)
  async updateQuestions(
    @graphql.Args() args: UpdateQuestionsArgs
  ): Promise<Questions | null> {
    try {
      return await this.service.updateQuestions({
        ...args,
        data: {
          ...args.data,

          topic: args.data.topic
            ? {
                connect: args.data.topic,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Questions)
  async deleteQuestions(
    @graphql.Args() args: DeleteQuestionsArgs
  ): Promise<Questions | null> {
    try {
      return await this.service.deleteQuestions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Topics, {
    nullable: true,
    name: "topic",
  })
  async getTopic(@graphql.Parent() parent: Questions): Promise<Topics | null> {
    const result = await this.service.getTopic(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
