/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Questions as PrismaQuestions,
  Topics as PrismaTopics,
} from "@prisma/client";

export class QuestionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questions.count(args);
  }

  async questionsItems(
    args: Prisma.QuestionsFindManyArgs
  ): Promise<PrismaQuestions[]> {
    return this.prisma.questions.findMany(args);
  }
  async questions(
    args: Prisma.QuestionsFindUniqueArgs
  ): Promise<PrismaQuestions | null> {
    return this.prisma.questions.findUnique(args);
  }
  async createQuestions(
    args: Prisma.QuestionsCreateArgs
  ): Promise<PrismaQuestions> {
    return this.prisma.questions.create(args);
  }
  async updateQuestions(
    args: Prisma.QuestionsUpdateArgs
  ): Promise<PrismaQuestions> {
    return this.prisma.questions.update(args);
  }
  async deleteQuestions(
    args: Prisma.QuestionsDeleteArgs
  ): Promise<PrismaQuestions> {
    return this.prisma.questions.delete(args);
  }

  async getTopic(parentId: string): Promise<PrismaTopics | null> {
    return this.prisma.questions
      .findUnique({
        where: { id: parentId },
      })
      .topic();
  }
}
