/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QuestionsService } from "../questions.service";
import { QuestionsCreateInput } from "./QuestionsCreateInput";
import { Questions } from "./Questions";
import { QuestionsFindManyArgs } from "./QuestionsFindManyArgs";
import { QuestionsWhereUniqueInput } from "./QuestionsWhereUniqueInput";
import { QuestionsUpdateInput } from "./QuestionsUpdateInput";

export class QuestionsControllerBase {
  constructor(protected readonly service: QuestionsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Questions })
  async createQuestions(
    @common.Body() data: QuestionsCreateInput
  ): Promise<Questions> {
    return await this.service.createQuestions({
      data: {
        ...data,

        topic: data.topic
          ? {
              connect: data.topic,
            }
          : undefined,
      },
      select: {
        correctAnswer: true,
        createdAt: true,
        id: true,
        questionTopic: true,
        text: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Questions] })
  @ApiNestedQuery(QuestionsFindManyArgs)
  async questionsItems(@common.Req() request: Request): Promise<Questions[]> {
    const args = plainToClass(QuestionsFindManyArgs, request.query);
    return this.service.questionsItems({
      ...args,
      select: {
        correctAnswer: true,
        createdAt: true,
        id: true,
        questionTopic: true,
        text: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Questions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async questions(
    @common.Param() params: QuestionsWhereUniqueInput
  ): Promise<Questions | null> {
    const result = await this.service.questions({
      where: params,
      select: {
        correctAnswer: true,
        createdAt: true,
        id: true,
        questionTopic: true,
        text: true,

        topic: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Questions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQuestions(
    @common.Param() params: QuestionsWhereUniqueInput,
    @common.Body() data: QuestionsUpdateInput
  ): Promise<Questions | null> {
    try {
      return await this.service.updateQuestions({
        where: params,
        data: {
          ...data,

          topic: data.topic
            ? {
                connect: data.topic,
              }
            : undefined,
        },
        select: {
          correctAnswer: true,
          createdAt: true,
          id: true,
          questionTopic: true,
          text: true,

          topic: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Questions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQuestions(
    @common.Param() params: QuestionsWhereUniqueInput
  ): Promise<Questions | null> {
    try {
      return await this.service.deleteQuestions({
        where: params,
        select: {
          correctAnswer: true,
          createdAt: true,
          id: true,
          questionTopic: true,
          text: true,

          topic: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
